---
title: "Einführung in R"
title-slide-attributes:
  data-background-image: ./images/r_desktop.jpg
  data-background-size: cover
  data-background-opacity: "0"
format: letterbox-revealjs
---

```{r}
#| echo: false
source(here::here("output_hook.R"))
```


## Überblick

1. Arbeiten mit R und RStudio
2. Grundlegende Operationen in R: Daten laden, Pakete installieren ...
3. Datenmanipulation und Transformation in R

:::{.callout-note}
## Ziel
Am Ende der Session solltet ihr mit den Grundlagen in R vertraut sein, sodass ihr den Rest des Workshops in R bestreiten könnt.   
:::


## {background-image="images/keyboard.jpg" background-size="1225px"}

::: {.absolute left="2.5%" top="2.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0);"}

RStudio Interface

:::


## 

Beim ersten Öffnen wird RStudio in etwa so aussehen:

![](./images/RStudio_window.PNG){fig-align="center"}

## 
Das Fenster hat 4 Bereiche:

![](./images/window_commented.PNG){fig-align="center"}

## 1) Script Pane
Editieren von Skripten (Datein, in denen Code gespeichert wird) und ausführen von Code (`crtl + enter` (Windows) oder `command + return` (macOS).

```{r}
#| code-link: true
# Our first line of code:
print("Hello World!")
```

:::{.callout-tip}
Übrigens: Codezeilen, die mit einem `#` beginnen, sind auskommentiert und werden nicht ausgewertet. 
:::

## 2) Console

Hier erscheint der Output aus unseren Skripten. Wir können auch direkt in der Konsole arbeiten und Befehle mit `enter` ausführen:

```{r}
10 + 5
```

:::{.callout-important}
Hier geschriebener Code wird nicht gespeichert. Nutze die Konsole also, um Dinge auszuprobieren, schreibe aber alles Wichtige in Skripte. 
:::

## 3) Workspace 
Im [Environment]{.highlight}-Tab erhalten wir einen Überblick über die Objekte, die derzeit in unserer R-Sitzung geladen sind.    
\
Wir können auch den Befehlsverlauf einsehen und einige weitere Dinge, die wir jetzt nicht benötigen.

## 4) Plots, Datein, Hilfe ...

Plots, die wir in einer R-Sitzung erstellen, werden im [Plot]{.highlight}-Tab ausgegeben.   

Beim Aufrufen der Hilfefunktion öffnet sich die Dokumentation im [Hilfe]{.highlight}-Tab.  

:::{.callout-important}

## Hilfe in R
Die Dokumentation kann mit `?funktionsname` aufgerufen werden. Das ist eines der wichtigsten Werkzeuge bei der Arbeit in R. 

:::

Der [Dateien]{.highlight}-Tab ermöglicht es uns, die Dateien in unserem Arbeitsverzeichnis zu verwalten.


## {background-image="images/coder.jpg" background-size="1225px"}

::: {.absolute left="5%" bottom="5%" style="color:#F8F8F8;"}

Los Geht's!
:::


## Grundlegende Operationen

- `c()`: Vektor erstellen
- `seq()` oder `:`: Sequenzen erstellen
- `&`, `|`, `!`: Logische Operatoren (und, oder, nicht)

## Datenstrukturen

```{r, echo = FALSE, results = 'asis'}
dat_structs <- data.frame(" " = c("1d", "2d", "nd"),
                          Homogen = c("atomic vector", "matrix", "array"), 
                          Heterogen = c("list", "data.frame", "")
)

knitr::kable(dat_structs, "pipe",
             col.names = c("", "Homogeneous", "Heterogeneous")
             ) 

```

:::{.aside}
Tabelle aus [Advanced R](http://adv-r.had.co.nz/Data-structures.html).
:::

## {background-image="images/setup.jpg" background-size="1225px"}

::: {.absolute left="5%" top="5%" style="color:#F8F8F8;"}

Basic Setup
:::

## RStudio Projekte
Hilft ungemein beim Organisieren von Dateien und Code!

:::{.callout-warning}
## Übung
Erstelle einen neuen Ordner (falls noch nicht getan) für diesen Workshop, und lege darin ein RStudio Projekt an (`File - New Project`).
:::

## Skripte

Hier kommt der Code rein!

:::{.callout-warning}
## Übung
Erstelle einen neuen Unterordner und lege darin ein R-Skript and (`File - New File - R Script`). In diesen kommen dann die Übungsaufgaben und Notizen aus dem Workshop. Leg am besten für jedes Thema ein eigenes Skript an, damit sie übersichtlich bleiben.
:::


## Pakete

:::: {.columns} 
::: {.column width="50%"}
Pakete sind Erweiterungen zum `base R` und funktionieren ein bisschen wie Apps im Playstore:

- ![](./images/playstore.png){width="19"} Einmalig installieren: 

```{r}  
#| eval: false
install.packages("packagename")
```

- ![](./images/app.png){width="19"} Bei jeder Nutzung in die R-Session laden:

```{r}  
#| eval: false
library(packagename)
```


:::

::: {.column width="50%"}

![](./images/pakete.jpg){.image-right}
::: 
:::: 

## [tidyverse](https://www.tidyverse.org/) {style="text-align: right;"}
:::: {.columns} 

::: {.column width="40%"}
![](./images/tidyverse_logo.png)
:::
::: {.column width="60%"}
Verbreitete Paketsammlung in R für so ziemlich jede Stufe der Datenauswertung. Der meiste Code den wird schreiben wird wahrscheinlich aus einer Mischung aus `base R` und `tidyverse` bestehen. 
:::
::::

## [tidyverse](https://www.tidyverse.org/): Pipe Operator

`%>%`


```{r}
sum(seq(from = 1, to = mean(c(45:100), na.rm = TRUE), by = 0.1))
```

wird zu:

```{r}
library(tidyverse)

c(45:100) %>%
  mean(na.rm = TRUE) %>%
  seq(from = 1, to = ., by = 0.1) %>%
  sum
```



## {background-image="images/data.jpg" background-size="1225px"}

::: {.absolute right="5%" top="5%" style="font-size:2em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255 .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255 .5); border-radius: 5px;"}

Daten und Pfade
:::

## Einlesen von Daten
```{css}
#| echo: false

.reveal table {
  font-size: 30px;
}

```

| Data type             | Import                    | Export                    |
|-----------------------|---------------------------|---------------------------|
| R objects (.Rdata, .rda) | `load()`                  | `save()`                  |
| single R object (.rds) | `readRDS()`               | `saveRDS()`               |
| text-files (.txt)     | `read.table()`            | `write.table()`           |
| .csv-files (.csv)     | `read.csv()`              | `write.csv()`             |
| Excel-files (.xlsx)   | `readxl::read_excel()`    | `writexl::write_xlsx()`   |
| SPSS-files (.sav)     | `haven::read_sav()`       | `haven::write_sav()`      |
| SAS-files (.sas)      | `haven::read_sas()`       | `haven::write_sas()`      |
| Stata-files (.stata)  | `haven::read_dta()`       | `haven::write_dta()`      |

: {.striped}

## {background-color="#FFFFFF"}
![](./images/here.png){fig-align="center"}


## Exkurs: [here](https://here.r-lib.org/)-Paket

[here](https://here.r-lib.org/) ist ein Paket zum Erstellen von Dateipfaden. Dadurch können Probleme mit relativen und absoluten Pfaden vermieden werden. 

`C:\Users\hafiznij\Documents\GitHub\IRT_workshop\raw_data\athletes.rds` wird zu:  
`here::here("raw_data", "athletes.rds")`. 

Also:
```{r}
# install.packages("here")
athletes <- readRDS(here::here("raw_data", "athletes.rds"))
```

## Einlesen von Daten

:::{.callout-note}
## Übung
Bitte bearbeite die [Übung zum Einlesen von Daten](https://nickhaf.github.io/IRT_workshop/exercises/intro_r/load_data_ex.html).
:::

## {background-image="images/butterfly.jpg" background-size="1225px"}

::: {.absolute left="2.5%" bottom="0.5%" style="color:#01364C; font-size:1.5em; box-shadow: 0 0 0rem 0 rgba(248, 248, 248, .0); padding: 0em 0em; backdrop-filter: blur(0px);"}

Datenmanipulation und Transformation

:::

## Überblick bekommen

:::{.columns}
:::{.column width="50%"}
- `View()`
- `str()`
- `head()`
:::
:::{.column width="50%"}
![](./images/chess.jpg){.image-right}
:::
:::

## `View()`

:::{.columns}
:::{.column width="50%"}

Öffnet den Datensatz in einem neuem Fenster:
```{r}
#| eval: false
View(athletes)
```

:::

:::{.column width="50%"}
![](./images/chess.jpg){.image-right}
:::
:::


## `str()`
- Struktur der Daten:
```{r}
str(athletes)
```

## `head()`
- Erste Zeilen:

```{r}
head(athletes)
```

## Einen Überblick bekommen: Übung

:::{.callout-note}
## Übung 1
Wie viele Zeilen und Spalten hat der in der letzten Übung eingelesene Datensatz `characters`? 
:::


:::{.callout-note}
## Übung 2
Aus welcher Show stammen die ersten Charactere im Datensatz? 
:::

# Subsetting
"Zeilen [z]{.highlight}uerst, Spalten [s]{.highlight}päter"
`[Zeile, Spalte]`




## Einfaches Subsetting
\
\
```{r}
# Auswahl der Spalten
athletes[c(1,4), c("Year", "Sport")]
```

## Konditionales Subsetting

```{r, output.lines = 3}
athletes_de <- athletes[athletes$Team == "Germany", ]
head(athletes_de)
```

Alle Zeilen, in denen `Team` gleich `Germany` ist.

:::{.callout-tip}

## Was passiert hier genau?

Wir erzeugen einen Boolean Vektor (besteht aus TRUE und FALSE), der anzeigt, welche Zeilen ausgewählt werden sollen:

```{r, output.lines = 1}
athletes$Team == "Germany"
```

Dieser indiziert dann die Zeilen, die ausgewählt werden sollen.
:::

## Komplexes konditionales Subsetting

Diese Prinzip können wir uns zu Nutze machen, um mehrere Bedingungen zu verknüpfen:

```{r, output.lines = 6}
athletes_3 <- athletes[(athletes$Sport == "Judo") & (athletes$Weight > 100 | athletes$Weight < 50), ]
head(athletes_3)
```

:::{.callout-important}
## `NA`
Viele der Zeilen enthalten nur `NA` Werte. Das schauen wir uns gleich im @sec-missings genauer an.
:::

## Subsetting Zeilen: [Tidyverse](https://www.tidyverse.org/)

```{r, output.lines=4}
library(tidyverse)

athletes %>%
  filter(Sport == "Judo", (Weight > 100 | Weight < 50)) %>%
  head
```

:::{.callout-tip}
## `NA`
Hier werden `NA` Werte automatisch ignoriert.
:::

## Subsetting Spalten: [Tidyverse](https://www.tidyverse.org/)
```{r}
athletes %>%
  select(Year, Sport) %>%
  head
```


## Übung
:::{.callout-note}
## Übung
Bitte bearbeite die [Übungen zum Subsetting](https://nickhaf.github.io/IRT_workshop/exercises/intro_r/subsetting_ex.html).
:::

## Fehlende Werte {#sec-missings}

::: r-fit-text
`NA`
:::

## Arbeit mit fehlenden Werten

- `NAs` in der Spalte `Weight` auswählen:
```{r, output.lines=1}
is.na(athletes$Weight)
```

- `NAs` in der Spalte `Weight` beim Subsetting nicht beachten:
```{r, output.lines=3}
athletes[(athletes$Sport == "Judo") & (athletes$Weight > 100 | athletes$Weight < 50) & !is.na(athletes$Weight), ]
```

## Fehlende Werte entfernen

```{r, output.lines=3}
athletes_na <- athletes[!is.na(athletes$Weight), ]
head(athletes_na)
```

```{r, output.lines=3}
## tidyverse:
athletes_na <- athletes %>%
  drop_na(Weight)
head(athletes_na)
```

Beides entfernt alle Zeilen, die in der Spalte `Weight` ein `NA` haben.  


## {background-image="images/shadow.jpg" background-size="1225px"}

::: {.absolute right="5%" top="5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); font-size:2.5em;"}

Reshaping

:::


## Wide-Format
```{r}
inhabitants_wide <- data.frame(
  country = c("China", "India", "USA"),
  inhabitants_2021 = c(1425893465 , 1407563842, NA),
  inhabitants_2022 = c(1425857720, 1420939232, 338903174)
)

head(inhabitants_wide)
```

## Long-Format
```{r}
#| echo: false

inhabitants_long <- inhabitants_wide %>%
  mutate(inhabitants_2021 = c(9597000, 3287000, 9834000)) %>%
  rename(area = inhabitants_2021) %>%
  pivot_longer(!country, names_to = "variable", values_to = "value") %>%
  data.frame()

head(inhabitants_long)
```


## Von Wide zu Long

```{r}
inhabitants_long_2 <- inhabitants_wide %>%
  pivot_longer(
    ## Spalten die gereshaped werden sollen
    cols = c("inhabitants_2022", "inhabitants_2021"),
    ## Neue Spalte, in der die bisherigen Spaltennamen gespeichert werden
    names_to = "year",
    ## Neue Spalte, in der die bisherigen Werte gespeichert werden
    values_to = "inhabitants"
  )

head(inhabitants_long)
```

## Von Long zu Wide

```{r}
inhabitants_wide_2 <- inhabitants_long %>%
  pivot_wider(
    id_cols = "country",
    names_from = "variable",
    values_from = "value"
  )

head(inhabitants_wide_2)
```

## Übung
:::{.callout-note}
## Übung
Bitte bearbeite die [Übung zum Reshaping](https://nickhaf.github.io/IRT_workshop/exercises/intro_r/reshaping_ex.html).
:::


## Merging

:::{.columns}
:::{.column width="60%"}

### Vorbereitung
Zuerst müssen wir die Daten laden und für das Beispiel vorbereiten. 

```{r, output.lines = 3}
world_coordinates <- readRDS(file = here::here("raw_data", "world_coordinates.rds"))

## Count the number of gold medal winners in each country
medal_counts <- athletes %>%
  filter(Medal == "Gold") %>%
  group_by(Region) %>%
  count(Medal) 
```


:::
:::{.column width="40%"}
![](./images/rivers.jpg){.image-right}
:::
:::


## Merging

Schaue dir die Dokumentation von `merge` an für Infos zu den Argumenten.

```{r}
medal_countries <- merge(
  x = medal_counts,
  y = world_coordinates,
  by.x = "Region",
  by.y = "region",
  all.x = FALSE,
  all.y = TRUE
)

head(medal_countries)
```


## Merging im [tidyverse](https://www.tidyverse.org/)

```{r}
medal_countries <- world_coordinates %>%
  left_join(medal_counts, join_by(region == Region))
head(medal_countries)
```


## Übung

:::{.callout-note}
## Übung
Bitte bearbeite die [Übung zum Merging](https://nickhaf.github.io/IRT_workshop/exercises/intro_r/merging_ex.html).
:::



## {background-image="images/zahnrad.jpg" background-size="1225px"}

::: {.absolute left="0%" bottom="0%" style="color:#01364C; font-size:1.5em; box-shadow: 0 0 0rem 0 rgba(248, 248, 248, .0); padding: 0em 0em; backdrop-filter: blur(0px); color: '#F8F8F8'"}

Funktionen

:::
## Basics
::: {.fragment .fade-in}

```{r}
#| eval: false
function_name <- function(argument_1, argument_2, ...){
  result <- argument_1 + argument_2
  return(result)
}
```
:::
### Motivation
- Alles was etwas in R [tut]{.highlight} ist eine Funktion. 
- Superhilfreich, sich eigene Funktionen zu schreiben, weil das eine Menge Code-Duplikationen vermeidet (und die sind schlecht). 

## Beispiel
```{r}
sum_num <- function(x, y, z = 0){
  result <- x + y + z
  return(result)
}

sum_num(x = 1, y = 1, z = 2)
sum_num(x = 1, y = 1)

```


## {background-image="images/empty_coffee.jpg" background-size="1225px"}
::: {.absolute left="5%" top="0%" style="font-size:2em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255, .5); border-radius: 5px;"}
Pause
:::

## Bildquellen
- Foto von <a href="https://unsplash.com/de/@afgprogrammer?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Mohammad Rahmani</a> auf <a href="https://unsplash.com/de/fotos/schwarzer-flachbildschirm-gA396xahf-Q?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Foto von <a href="https://unsplash.com/de/@adigold1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Adi Goldstein</a> auf <a href="https://unsplash.com/de/fotos/graustufenfotografie-eines-mannes-im-gestreiften-hemd-rgkKFn5Ysb0?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Icons from [icons8.de](https://icons8.de).

## Bildquellen
- Foto von <a href="https://unsplash.com/de/@elnazasadi?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">elnaz asadi</a> auf <a href="https://unsplash.com/de/fotos/ein-mehrfarbiges-muster-aus-sechseckigen-formen-Ej50vyvxJ94?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Foto von <a href="https://unsplash.com/de/@kommumikation?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Mika Baumeister</a> auf <a href="https://unsplash.com/de/fotos/weisses-druckpapier-mit-zahlen-Wpnoqo2plFA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- https://upload.wikimedia.org/wikipedia/commons/f/ff/Tidyverse_hex_logo.png
- https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/here.png
- Foto von <a href="https://unsplash.com/de/@scw1217?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Suzanne D. Williams</a> auf <a href="https://unsplash.com/de/fotos/drei-puppen-VMKBFR6r_jg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>

## Bildquellen
- Foto von <a href="https://unsplash.com/de/@zoeholling?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Zoe Holling</a> auf <a href="https://unsplash.com/de/fotos/mann-steht-auf-grossem-schachbrett-mit-brustfiguren-im-park-UDfmSK4AS3E?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Foto von <a href="https://unsplash.com/de/@steinart?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Steinar Engeland</a> auf <a href="https://unsplash.com/de/fotos/grauer-und-weisser-blumenvorhang-BfMbxUu0EGE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Foto von <a href="https://unsplash.com/de/@muhil?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Muhil Mohan</a> auf <a href="https://unsplash.com/de/fotos/ein-fluss-der-durch-einen-uppigen-grunen-hugel-fliesst-n1evnqIt9BQ?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Foto von <a href="https://unsplash.com/de/@luk10?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Lukas Tennie</a> auf <a href="https://unsplash.com/de/fotos/nahaufnahme-eines-zifferblatts-das-die-zahnrader-zeigt-DAWnMmUSMdU?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
  
  
  
  
