---
title: "Einführung in R"
subtitle: "Übungen"
lang: de
author: "Nicklas Hafiz"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: html
---

# Einlesen von Daten

## 1. Download

Erstelle einen neuen Ordner `data` in deinem Arbeitsverzeichnis. Gehe dann auf [GitHub](https://github.com/nickhaf/IRT_workshop/tree/main/raw_data), downloade die beiden Datensätze `psych_stats.csv` und `characters.rds`, und speichere sie in deinem neu erstellen `data` Ordner ab. 

:::{.callout-hint}
Zum Downloaden von GitHub, klicke auf die Datei. Es öffnet sich eine neue Seite, auf der du oben rechts den Button "Download" findest. 
:::

## 2. Einlesen
Lese beide Datensätze in deinem R-Skript ein. Schaue dir vor allem den `psych_stats` Datensatz danach genauer an. Hat alles geklappt? Wenn nicht, woran könnte es liegen?

::: {.callout-tip collapse="true"}
## Tipp 1
Es handelt sich um eine `.rds`-Datei und eine `.csv`-Datei.
:::

::: {.callout-tip collapse="true"}
## Tipp 2
Öffne die `.csv`-Datei und schaue nach, durch welches Zeichen die Werte getrennt sind. Nutze das `sep` Argument in `read.csv`!
:::

::: {.callout-caution collapse="true"}
## Lösung

```{r}
characters <- readRDS(file = here::here("raw_data", "characters.rds"))
psych_stats <- read.csv(
  file = here::here("raw_data", "psych_stats.csv"),
  sep = ";"
)
```
:::

# Subsetting

::: {.callout-caution icon="false" collapse="true"}
## Vorheriger Code

```{r, message = FALSE}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

## Load the data
characters <- readRDS(file = here::here("raw_data", "characters.rds"))
psych_stats <- read.csv(
  file = here::here("raw_data", "psych_stats.csv"),
  sep = ";"
)
```
:::

## 1. Frage

Korrigiere den folgenden Code, sodass nur die ersten 10 Zeilen und die letzten 3 Spalten ausgewählt werden. 

```{r correct_subsetting, eval=FALSE}
characters[4:6, 10]
```

::: {.callout-tip collapse="true"}
## Tipp
Wir müssen die Zeilen, die wir auswählen wollen, [vor]{.highlight} dem Komma `,` schreiben, die Spalten danach. 
:::

::: {.callout-caution collapse="true" icon="false"}
## Lösung

```{r}
characters[1:10, 4:6]
```
:::

## 2. Frage

1.  Warum funktioniert der folgende Code nicht? Korrigiere ihn in deinem eigenen Skript. 
```{r, eval = FALSE}
characters[uni_name == "Friends", ]
```

::: {.callout-tip collapse="true"}
## Tipp


You need to extract the column from the data frame with `$` before you can compare it to the string.
:::

::: {.callout-caution collapse="true"}
## Lösung
```{r}
characters[characters$uni_name == "Friends", ]

```
:::

2.  Which characters will this code extract: `characters[(characters$uni_name == "Harry Potter" | characters$uni_name != "Harry Potter") & !(characters$notability > 90), ]`?
    -   [ ] All Harry Potter characters with a notability over `90`.
    -   [ ] All characters that are not from the Harry Potter universe and have a notability under 90.
    -   [ ] All characters with a notability over `90`.
    -   [ ] All characters with a notability under `90`.

::: {.callout-caution collapse="true"}
## Lösung

-   [ ] All Harry Potter characters with a notability over `90`.
-   [ ] All characters that are not from the Harry Potter universe and have a notability under 90.
-   [ ] All characters with a notability over `90`.
-   [x] All characters with a notability under `90`.

Kind of a trick question: because we select all characters that are from the Harry Potter universe OR are not from there, we select all characters independent of their TV show. But we select all characters that have notability under 90 (beware of the `!` in front of the respective comparison).
:::

## Exercise 3

1.  Which character(s) from "Game of Thrones" has a notability rating over `90`? Use `Base R`.

::: {.callout-tip collapse="true"}
## Hint

You need to define a logical vector which contains `TRUE` values for all "Game of Thrones" characters that have a notability over `90`.
:::

::: {.callout-caution collapse="true"}
## Lösung

```{r}
characters[characters$uni_name == "Game of Thrones" & characters$notability > 90, ]
```
That's only Tyrion Lannister.

:::


2.  Which characters from "How I Met Your Mother" or "Breaking Bad" are included in the data? Use the `tidyverse`.

::: {.callout-tip collapse="true"}
## Hint

Use the `filter()` function.
:::

::: {.callout-caution collapse="true"}
## Lösung

```{r, message = FALSE}
library(tidyverse)
filter(characters, uni_name %in% c("How I Met Your Mother", "Breaking Bad"))
```
:::

# Missings
::: {.callout-caution icon="false" collapse="true"}
## Previous code

```{r, message = FALSE}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

## Load the data
characters <- readRDS(file = here::here("raw_data", "characters.rds"))
psych_stats <- read.csv(
  file = here::here("raw_data", "psych_stats.csv"),
  sep = ";"
)
```
:::

## Exercise 1

1.  Does the `characters` data set contain any `NAs`?

::: {.callout-tip collapse="true"}
## Hint

Use `any()` to see if a logical vector contains any `TRUE` values.
:::

::: {.callout-caution collapse="true"}
## Lösung

```{r}
any(is.na(characters))
```

No, there don't seem to be any `NAs` in this data set, which would be great in real life. For this exercise it's not great, so let's introduce some `NAs` manually.
:::

2.  Be careful not to overwrite the `characters` data frame, so copy it into the new object `characters_na` before doing anything. Then set the `name` to `NA` in the rows `34, 103, 300` and the `uni_name` to `NA` in the rows `404, 670`.

::: {.callout-tip collapse="true"}
## Hint
To overwrite values, you can select them on the **left** side of the assignment operator `<-` and assign them a new value on the right side.
:::

::: {.callout-caution collapse="true"}
## Lösung

```{r}
characters_na <- characters

characters_na[c(34, 103, 300), "name"] <- NA
characters_na[c(404, 670), "uni_name"] <- NA
```
:::

3.  Remove all rows containing missing values in the column `name` from the `characters_na` data frame.

::: {.callout-caution collapse="true"}
## Lösung

```{r}
characters_na <- characters_na[!is.na(characters_na$name), ]
```

Or:

::: tidy
```{r}
library(tidyverse)

characters_na <- characters_na %>%
  drop_na(name)
```
:::
:::


# Reshaping
::: {.callout-caution icon="false" collapse="true"}
## Previous code

```{r, message = FALSE}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

## Load the data
characters <- readRDS(file = here::here("raw_data", "characters.rds"))
psych_stats <- read.csv(
  file = here::here("raw_data", "psych_stats.csv"),
  sep = ";"
)
```
:::

## Exercise 1

Take a look at the data frame `psych_stats`. Which format does it have?

-   [ ] Wide format
-   [ ] Long format
-   [ ] None of the above

::: {.callout-caution collapse="true"}
## Lösung

-   [x] Wide format
-   [ ] Long format
-   [ ] None of the above

Each unit of observation, in this case each character, only has one row.
:::

## Exercise 2

Reshape it, so there are only three columns in the data set: `char_id`, `question` and `rating`.

::: {.callout-tip collapse="true"}
## Hint

You can select multiple columns like this: `column_1:column_10`.
:::

::: {.callout-caution collapse="true"}
## Lösung

```{r}
psych_stats <- psych_stats %>%
  pivot_longer(cols = messy_neat:innocent_jaded, 
               names_to = "question", 
               values_to = "rating")

head(psych_stats)

```

Now we have multiple rows for every character, but all question ratings are nicely aligned in one column.
:::

## Exercise 3

Try to reshape the data into long format again.

::: {.callout-caution collapse="true"}
## Lösung

```{r}
psych_stats %>%
  pivot_wider(id_cols = char_id, 
               names_from = "question", 
               values_from = "rating")

```

This is how we got it! But scratch that, it was just for the sake of the exercise. We want to use `psych_stats` in the long format from now on.
:::

# Merging
::: {.callout-caution icon="false" collapse="true"}
## Previous code

```{r, message = FALSE}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

## Load the data
characters <- readRDS(file = here::here("raw_data", "characters.rds"))
psych_stats <- read.csv(
  file = here::here("raw_data", "psych_stats.csv"),
  sep = ";"
)

## Reshape into long format:
psych_stats <- psych_stats %>%
  pivot_longer(cols = messy_neat:innocent_jaded, 
               names_to = "question", 
               values_to = "rating")

## Take a look at the data sets
str(characters)
str(psych_stats)
```
:::

Now we have gotten to know our `characters` data set a bit more. However, the personality ratings are not included yet. For that, we need to combine it with the `psych_stats` data set.

## Exercise 1

Merge the `characters` data frame and the `psych_stats` data frame on a common column.

::: {.callout-tip collapse="true"}
## Hint

Identify the common columns. Are they named the same in both data frames? Look at the documentation of `?merge` to see, how you can merge data frames that don't have identically named columns.
:::

::: {.callout-caution collapse="true"}
## Lösung

First, let's take a look at both data sets again:

```{r}
str(characters)
str(psych_stats)
```

It seems like both data frames have a column containing an ID for the character. We can use that column for merging:

```{r}
characters_stats <- merge(
  x = characters,
  y = psych_stats,
  by.x = "id", 
  by.y = "char_id"
)

str(characters_stats)
```

Worked like a charm!
:::
